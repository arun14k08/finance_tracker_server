// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: accounts.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (user_id, name, account_type, currency, bank_name, last_four, nickname, notes, balance)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, user_id, name, balance, account_type, currency, bank_name, last_four, is_active, nickname, notes, created_at, updated_at
`

type CreateAccountParams struct {
	UserID      int64
	Name        string
	AccountType sql.NullString
	Currency    sql.NullString
	BankName    string
	LastFour    string
	Nickname    sql.NullString
	Notes       sql.NullString
	Balance     string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.UserID,
		arg.Name,
		arg.AccountType,
		arg.Currency,
		arg.BankName,
		arg.LastFour,
		arg.Nickname,
		arg.Notes,
		arg.Balance,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Balance,
		&i.AccountType,
		&i.Currency,
		&i.BankName,
		&i.LastFour,
		&i.IsActive,
		&i.Nickname,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccountByBankAndLastFour = `-- name: GetAccountByBankAndLastFour :one
SELECT id, user_id, name, balance, account_type, currency, bank_name, last_four, is_active, nickname, notes, created_at, updated_at FROM accounts
WHERE bank_name = $1 AND last_four = $2 AND user_id = $3
`

type GetAccountByBankAndLastFourParams struct {
	BankName string
	LastFour string
	UserID   int64
}

func (q *Queries) GetAccountByBankAndLastFour(ctx context.Context, arg GetAccountByBankAndLastFourParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByBankAndLastFour, arg.BankName, arg.LastFour, arg.UserID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Balance,
		&i.AccountType,
		&i.Currency,
		&i.BankName,
		&i.LastFour,
		&i.IsActive,
		&i.Nickname,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, user_id, name, balance, account_type, currency, bank_name, last_four, is_active, nickname, notes, created_at, updated_at FROM accounts
WHERE id = $1
`

func (q *Queries) GetAccountByID(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Balance,
		&i.AccountType,
		&i.Currency,
		&i.BankName,
		&i.LastFour,
		&i.IsActive,
		&i.Nickname,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountsByUserId = `-- name: GetAccountsByUserId :many
SELECT id, user_id, name, balance, account_type, currency, bank_name, last_four, is_active, nickname, notes, created_at, updated_at FROM accounts
WHERE user_id = $1
`

func (q *Queries) GetAccountsByUserId(ctx context.Context, userID int64) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccountsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Balance,
			&i.AccountType,
			&i.Currency,
			&i.BankName,
			&i.LastFour,
			&i.IsActive,
			&i.Nickname,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET name = COALESCE($2, name),
    account_type = COALESCE($3, account_type),
    currency = COALESCE($4, currency),
    bank_name = COALESCE($5, bank_name),
    last_four = COALESCE($6, last_four),
    nickname = COALESCE($7, nickname),
    notes = COALESCE($8, notes),
    is_active = COALESCE($9, is_active)
WHERE id = $1
RETURNING id, user_id, name, balance, account_type, currency, bank_name, last_four, is_active, nickname, notes, created_at, updated_at
`

type UpdateAccountParams struct {
	ID          int64
	Name        string
	AccountType sql.NullString
	Currency    sql.NullString
	BankName    string
	LastFour    string
	Nickname    sql.NullString
	Notes       sql.NullString
	IsActive    sql.NullBool
	IsDefaultAccount bool
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.Name,
		arg.AccountType,
		arg.Currency,
		arg.BankName,
		arg.LastFour,
		arg.Nickname,
		arg.Notes,
		arg.IsActive,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Balance,
		&i.AccountType,
		&i.Currency,
		&i.BankName,
		&i.LastFour,
		&i.IsActive,
		&i.Nickname,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
