// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: token_bl.sql

package db

import (
	"context"
	"time"
)

const createBlackList = `-- name: CreateBlackList :one
INSERT INTO token_blacklist (jti, expires_at) VALUES ($1, $2)
RETURNING jti, expires_at
`

type CreateBlackListParams struct {
	Jti       string
	ExpiresAt time.Time
}

func (q *Queries) CreateBlackList(ctx context.Context, arg CreateBlackListParams) (TokenBlacklist, error) {
	row := q.db.QueryRowContext(ctx, createBlackList, arg.Jti, arg.ExpiresAt)
	var i TokenBlacklist
	err := row.Scan(&i.Jti, &i.ExpiresAt)
	return i, err
}

const deleteExpiredBlackList = `-- name: DeleteExpiredBlackList :execrows
DELETE FROM token_blacklist
WHERE expires_at < NOW()
RETURNING jti, expires_at
`

func (q *Queries) DeleteExpiredBlackList(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteExpiredBlackList)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getBlackListByJti = `-- name: GetBlackListByJti :one
SELECT jti, expires_at 
FROM token_blacklist
WHERE jti = $1
`

func (q *Queries) GetBlackListByJti(ctx context.Context, jti string) (TokenBlacklist, error) {
	row := q.db.QueryRowContext(ctx, getBlackListByJti, jti)
	var i TokenBlacklist
	err := row.Scan(&i.Jti, &i.ExpiresAt)
	return i, err
}
