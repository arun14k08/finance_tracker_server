// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: merchants.sql

package db

import (
	"context"
	"database/sql"
)

const addOrUpdateUserMerchant = `-- name: AddOrUpdateUserMerchant :one
INSERT INTO user_merchants (user_id, merchant_id, last_used, usage_count)
VALUES ($1, $2, NOW(), 1)
ON CONFLICT (user_id, merchant_id)
DO UPDATE SET 
    last_used = NOW(),
    usage_count = user_merchants.usage_count + 1
RETURNING id, user_id, merchant_id, last_used, usage_count
`

type AddOrUpdateUserMerchantParams struct {
	UserID     int64
	MerchantID int64
}

func (q *Queries) AddOrUpdateUserMerchant(ctx context.Context, arg AddOrUpdateUserMerchantParams) (UserMerchant, error) {
	row := q.db.QueryRowContext(ctx, addOrUpdateUserMerchant, arg.UserID, arg.MerchantID)
	var i UserMerchant
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.LastUsed,
		&i.UsageCount,
	)
	return i, err
}

const createMerchant = `-- name: CreateMerchant :one
INSERT INTO merchants (name, category, website)
VALUES ($1, $2, $3)
RETURNING id, name, category, website, created_at, updated_at
`

type CreateMerchantParams struct {
	Name     string
	Category sql.NullString
	Website  sql.NullString
}

func (q *Queries) CreateMerchant(ctx context.Context, arg CreateMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, createMerchant, arg.Name, arg.Category, arg.Website)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Website,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFrequentMerchantsByUser = `-- name: GetFrequentMerchantsByUser :many
SELECT m.id, m.name, m.category, m.website, m.created_at, m.updated_at
FROM merchants m
JOIN user_merchants um ON m.id = um.merchant_id
WHERE um.user_id = $1
ORDER BY um.usage_count DESC
LIMIT $2
`

type GetFrequentMerchantsByUserParams struct {
	UserID int64
	Limit  int32
}

func (q *Queries) GetFrequentMerchantsByUser(ctx context.Context, arg GetFrequentMerchantsByUserParams) ([]Merchant, error) {
	rows, err := q.db.QueryContext(ctx, getFrequentMerchantsByUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Merchant
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.Website,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMerchantByID = `-- name: GetMerchantByID :one
SELECT id, name, category, website, created_at, updated_at FROM merchants
WHERE id = $1
`

func (q *Queries) GetMerchantByID(ctx context.Context, id int64) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchantByID, id)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Website,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMerchantByName = `-- name: GetMerchantByName :one
SELECT id, name, category, website, created_at, updated_at FROM merchants
WHERE name = $1
`

func (q *Queries) GetMerchantByName(ctx context.Context, name string) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchantByName, name)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Website,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMerchants = `-- name: ListMerchants :many
SELECT id, name, category, website, created_at, updated_at FROM merchants
ORDER BY name
`

func (q *Queries) ListMerchants(ctx context.Context) ([]Merchant, error) {
	rows, err := q.db.QueryContext(ctx, listMerchants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Merchant
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.Website,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
